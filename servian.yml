AWSTemplateFormatVersion: 2010-09-09

Description: Automation Engineer Technical Assessment - Vibrato_Servian

Resources:
  DynamoTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Assessment
      AttributeDefinitions:
        - AttributeName: count
          AttributeType: N
      KeySchema:
        - AttributeName: count
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      SSESpecification:
        SSEEnabled: true

  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: !Sub |
          import json
          import boto3
              
          def lambda_handler(event, context):
              dynamodb = boto3.client('dynamodb')
              
              response = dynamodb.scan(TableName='Assessment')
              
              j = 1
              for i in response['Items']:
                  print(i['count'])
                  j += 1
              
              dynamodb.put_item(TableName='Assessment', Item={'count': {'N': str(j)}})

              return('<html><head><title>HTML from API Gateway/Lambda</title></head><body><h2>Call number ' + str(j) + '</h2></body></html>')
              

      Description: API Gateway Assessment
      Handler: index.lambda_handler
      MemorySize: 128
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.7
      Timeout: 5

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
            - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: Assessment
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - dynamodb:*
            Resource: !GetAtt DynamoTable.Arn

  APIPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:invokeFunction'
      FunctionName:
        'Fn::GetAtt':
          - LambdaFunction
          - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        'Fn::Join':
          - ''
          - - 'arn:aws:execute-api:'
            - Ref: 'AWS::Region'
            - ':'
            - Ref: 'AWS::AccountId'
            - ':'
            - Ref: ApiRestApi
            - /*


  ApiRestApi:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Name: !Sub Servian
      EndpointConfiguration:
        Types: 
          - REGIONAL

  ApiMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      RestApiId: !Ref ApiRestApi
      ResourceId: { "Fn::GetAtt": ["ApiRestApi", "RootResourceId"] }
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri: !Join 
          - ''
          - - 'arn:aws:apigateway:'
            - !Ref 'AWS::Region'
            - ':lambda:path/2015-03-31/functions/'
            - !GetAtt 
              - LambdaFunction
              - Arn
            - /invocations
        IntegrationResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Content-Type: "'text/html'"
          ResponseTemplates:
            text/html: "$input.path('$')"
      MethodResponses:
        - ResponseParameters:
            method.response.header.Content-Type: true
          StatusCode: 200

  ApiDeployment:
    Type: 'AWS::ApiGateway::Deployment'
    Properties:
      RestApiId: !Ref ApiRestApi
      StageName: default
    DependsOn:
      - ApiMethod
      - ApiRestApi
      - APIPermission

Outputs:
  Url:
    Description: URL of the API application
    Value: !Join 
      - ''
      - - 'https://'
        - !Ref ApiRestApi
        - .execute-api.
        - !Ref 'AWS::Region'
        - .amazonaws.com/default
